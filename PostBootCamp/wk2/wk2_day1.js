// If you finish this kata, you can try Insane Coloured Triangles by Bubbler, which is a much harder version of this one.

// A coloured triangle is created from a row of colours, each of which is red, green or blue. Successive rows, each containing one fewer colour than the last, are generated by considering the two touching colours in the previous row. If these colours are identical, the same colour is used in the new row. If they are different, the missing colour is used in the new row. This is continued until the final row, with only a single colour, is generated.

// The different possibilities are:

// Colour here:        G G        B G        R G        B R
// Becomes colour:      G          R          B          G
// With a bigger example:

// R R G B R G B B
//  R B R G B R B
//   G G B R G G
//    G R G B G
//     B B R R
//      B G R
//       R B
//        G
// You will be given the first row of the triangle as a string and its your job to return the final colour which would appear in the bottom row as a string. In the case of the example above, you would the given RRGBRGBB you should return G.

// The input string will only contain the uppercase letters R, G, B and there will be at least one letter so you do not have to test for invalid input.
// If you are only given one colour as the input, return that colour.

function triangle(row) {
    let resRow = "";
   
    if (row.length == 1){
      return row; 
    }
  
    for(let i = 0; i < row.length - 1; i++){
      if(row[i] == row[i+1]){
        if(row[i] == "G"){
          resRow += "G"; 
        } else if (row[i] == "R"){
          resRow += "R"; 
        } else {
          resRow += "B"
        }
      } else {
        if(row[i] == "G"){
          if(row[i+1] == "R"){
            resRow+= "B"
          } else {
            resRow += "R"
          }
        } else if (row[i] == "R"){
          if(row[i+1] == "G"){
            resRow+= "B"
          } else {
            resRow += "G"
          }
        } else {
          if(row[i+1] == "R"){
            resRow+= "G"
          } else {
            resRow += "R"
          }
        }
      }
    }
    
    return triangle(resRow); 

}

//use of recursion - way to refactor? So many if statements!

function triangle(row) {
    let resRow = "";
   
    if (row.length == 1){
      return row; 
    }
  
    let ind = 0; 
  
    // used a while statement instead of a for loop... I don't think it makes a difference in performance. 
    while(ind < row.length-1){
        //nested ternary operators rather than a billion if/else statements
      row[ind] == row[ind+1] ? resRow += row[ind]
      : (row[ind] == "B" && row[ind+1] == "G" || row[ind] == "G" && row[ind+1] == "B") ? resRow += "R"
      : (row[ind] == "G" && row[ind+1] == "R" || row[ind] == "R" && row[ind+1] == "G") ? resRow += "B"
      : resRow += "G";
      
      ind++; 
    }

    
    return triangle(resRow); 
    
}

//refactored from codewars

//anonymous function
const triangle = row => {
    //ternary that sets your returned string to blank or to the input IF the input is one character
    let reduced = row.length > 1 ? '' : row;
    for (let i = 0; i < row.length - 1; i += 1) {
        //ternary that states: if the char and the next char are the same, you add that char to the reduced string,
        //else you take the 'RGB' string and replace the given characters from row with empty strings.
        //the .replace method eliminates the nested ternary statements from my refactored code. Very clever!
      reduced += row[i] == row[i+1] ? row[i] : 'RGB'.replace(row[i], '').replace(row[i+1], '');
    }
    return reduced.length > 1 ? triangle(reduced) : reduced;
  }